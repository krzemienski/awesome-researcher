---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

* **Type:** Command-Line Tool (Docker-first)
* **Description:** Build a Docker-first CLI tool ("Awesome-List Researcher") that automatically enhances "awesome-style" GitHub repositories by fetching the README, parsing it into JSON, discovering new resources via a multi-agent OpenAI workflow, merging results, and generating an `updated_list.md` that passes `awesome-lint`.
* **Primary Goal:** Automatically enhance awesome-style GitHub repositories in a reproducible containerized workflow with spec compliance and cost constraints.

## Project Structure

### Framework-Specific Routing

* **Directory Rules:**
    * [`CLI/Python 3.12`]: No web routes. All code lives under `src/` as Python modules; entrypoint is `src/main.py`.
    * Example: `src/awesome_parser.py`, `src/planner_agent.py`, `src/main.py`.

### Core Directories

* **Versioned Structure:**
    * `src`: Python 3.12 source modules (parser, agents, validator, renderer).
    * `tests`: Functional test scripts, e.g., `run_e2e.sh`.
    * `runs`: Output artifacts with timestamped subfolders (`runs/YYYY-MM-DDTHH:MM:SSZ/`).
    * Root: `Dockerfile`, `build-and-run.sh`, `pyproject.toml`, `poetry.lock`, `.gitignore`.

### Key Files

* **Stack-Versioned Patterns:**
    * `Dockerfile`: Multi-stage build targeting `python:3.12-slim`.
    * `build-and-run.sh`: Builds the Docker image and runs the container with CLI flags.
    * `src/main.py`: Orchestrates the full workflow using `argparse`, enforces wall-time and cost ceilings.
    * `src/awesome_parser.py`: Parses `README.md` into `original.json`, uses a Bloom filter for duplicates.
    * `src/planner_agent.py`: LLM-based query generation with `gpt-4.1-mini`.
    * `src/category_agent.py`: Parallel research agents using `o3` model.
    * `tests/run_e2e.sh`: Runs an end-to-end scenario, prints “✅ All good”.
    * `.gitignore`: Excludes `runs/`, cache, virtual environments.

## Tech Stack Rules

* **Version Enforcement:**
    * python@3.12: Use Poetry, enforce PEP 8, type hints, and whole-file codegen.
    * poetry@^1.5: Lock dependencies in `pyproject.toml` and `poetry.lock`.
    * docker@20+: Multi-stage Docker builds; no host dependencies.
    * openai-agents-sdk@latest: Enable retry/backoff and cost tracking.

## PRD Compliance

* **Non-Negotiable:**
    * "Docker-Only: The entire tool must run inside a Docker container. No host Python installations or external CI dependencies are allowed.": Enforce containerized environment.
    * "No Mocks: Live operations only.": All HTTP and API calls must be real.
    * "Structured Logging: ISO 8601 timestamps, event details, token usage, and cost in USD must be logged to a single `agent.log` file.": Single unified log.

## App Flow Integration

* **Stack-Aligned Flow:**
    1. **CLI Flags** handled in `src/main.py`: `--repo_url`, `--wall_time`, `--cost_ceiling`, `--min_stars`, `--output_dir`, `--seed`, `--model_*`, plus `OPENAI_API_KEY`.
    2. **Fetch README** → `src/awesome_parser.py` → `original.json`.
    3. **PlannerAgent** → `src/planner_agent.py` → `plan.json`.
    4. **CategoryResearchAgents** → `src/category_agent.py` → `candidate_*.json`.
    5. **Aggregator & DuplicateFilter** → `src/aggregator.py` & `src/duplicate_filter.py` → `new_links.json`.
    6. **Validator** → `src/validator.py` → filters by HTTP 200 and `--min_stars`.
    7. **Renderer** → `src/renderer.py` → merges JSONs, runs `awesome-lint` fix loop → `updated_list.md`.
    8. **Persist Artifacts** in `runs/<ISO-TS>/` and log to `agent.log`.

## Best Practices

* Docker
    * Use `python:3.12-slim` official base image.
    * Leverage multi-stage builds to minimize final image size.
    * Pin base image digests and dependencies.
    * Clean up caches and layer artifacts.
* Python 3.12
    * Adhere to PEP 8 and PEP 257 (docstrings).
    * Use type annotations and `mypy` checks.
    * Modularize by single responsibility principle.
    * Generate whole files in one go to preserve context.
* Poetry
    * Pin all library versions in `pyproject.toml`.
    * Commit `poetry.lock` for reproducibility.
    * Use `poetry run` to invoke scripts inside the virtual env.
* OpenAI Agents SDK
    * Implement exponential backoff for rate limits.
    * Track and estimate cost per API call; enforce `--cost_ceiling`.
    * Log model name, token counts, and cost per call.
* awesome-lint
    * Enforce Awesome-List spec during rendering.
    * Use fix loop until zero lint errors.
    * Validate alphabetical order, HTTPS status, heading levels, and description length.

## Rules

* Derive folder/file patterns **directly** from techStackDoc versions.
* If Python 3.12 CLI: Enforce `src/` directory with modular `.py` files and `main.py` as entrypoint.
* If Docker-first: Enforce a multi-stage `Dockerfile` and `build-and-run.sh` for container lifecycle.
* Mirror this logic for functional testing: `tests/run_e2e.sh` only; no external CI.
* Never mix host dependencies: all code, runtime, and dependencies must reside inside Docker.

## Rules Metrics

Before starting the project development, create a metrics file in the root of the project called `cursor_metrics.md`.

### Instructions:

* Each time a cursor rule is used as context, update `cursor_metrics.md`.
* Use the following format for `cursor_metrics.md`:

# Rules Metrics

## Usage

The number of times rules is used as context

* rule-name.mdc: 5
* another-rule.mdc: 2
* ...other rules